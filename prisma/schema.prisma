generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  firstName     String
  lastName      String
  email         String         @unique
  password      String
  role          UserRole       @default(MEMBER)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]

  @@index([isActive]) // For filtering active/inactive users
  @@index([role]) // For role-based queries
  @@index([createdAt]) // For pagination and analytics
  @@index([firstName, lastName]) // For full-name search optimization
  @@index([email, isActive]) // Compound index for common auth queries
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  revoked   Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, revoked]) // For finding user's active tokens
  @@index([token]) // Already unique, but explicit index
  @@index([expiresAt]) // For token cleanup cron jobs
  @@index([createdAt]) // For analytics and cleanup
  @@map("refresh_tokens")
}

enum UserRole {
  ADMIN
  MEMBER
}
